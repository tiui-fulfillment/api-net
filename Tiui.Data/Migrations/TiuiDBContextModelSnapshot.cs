// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

#nullable disable

namespace Tiui.Data.Migrations
{
  [DbContext(typeof(TiuiDBContext))]
  partial class TiuiDBContextModelSnapshot : ModelSnapshot
  {
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "6.0.1")
          .HasAnnotation("Relational:MaxIdentifierLength", 63);

      NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

      modelBuilder.Entity("Tiui.Entities.Cancelaciones.CancelacionGuia", b =>
          {
            b.Property<int?>("CancelacionGuiaId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("CancelacionGuiaId"));

            b.Property<DateTime>("FechaRegistro")
                      .HasColumnType("timestamp without time zone");

            b.Property<long?>("GuiaId")
                      .HasColumnType("bigint");

            b.Property<int?>("MotivoCancelacionId")
                      .HasColumnType("integer");

            b.Property<string>("Observacion")
                      .HasColumnType("text");

            b.HasKey("CancelacionGuiaId");

            b.HasIndex("GuiaId");

            b.HasIndex("MotivoCancelacionId");

            b.ToTable("CancelacionGuias");
          });

      modelBuilder.Entity("Tiui.Entities.Cancelaciones.MotivoCancelacion", b =>
          {
            b.Property<int>("MotivoCancelacionId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MotivoCancelacionId"));

            b.Property<bool>("Activo")
                      .HasColumnType("boolean");

            b.Property<string>("Descripcion")
                      .HasColumnType("text");

            b.Property<DateTime>("FechaRegistro")
                      .HasColumnType("timestamp without time zone");

            b.Property<int>("TipoCancelacion")
                      .HasColumnType("integer");

            b.HasKey("MotivoCancelacionId");

            b.ToTable("MotivosCancelaciones");

            b.HasData(
                      new
                  {
                    MotivoCancelacionId = 1,
                    Activo = true,
                    Descripcion = "No tiene dinero",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1913),
                    TipoCancelacion = 1
                  },
                      new
                  {
                    MotivoCancelacionId = 2,
                    Activo = true,
                    Descripcion = "Encontró el producto mas barato",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1919),
                    TipoCancelacion = 1
                  },
                      new
                  {
                    MotivoCancelacionId = 3,
                    Activo = true,
                    Descripcion = "Retraso en entrega",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1923),
                    TipoCancelacion = 1
                  },
                      new
                  {
                    MotivoCancelacionId = 4,
                    Activo = true,
                    Descripcion = "No se puede contactar con el cliente",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1926),
                    TipoCancelacion = 1
                  },
                      new
                  {
                    MotivoCancelacionId = 5,
                    Activo = true,
                    Descripcion = "No hay inventario",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1929),
                    TipoCancelacion = 1
                  },
                      new
                  {
                    MotivoCancelacionId = 6,
                    Activo = true,
                    Descripcion = "No reconoce la compra",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1932),
                    TipoCancelacion = 1
                  },
                      new
                  {
                    MotivoCancelacionId = 7,
                    Activo = true,
                    Descripcion = "Cliente ya no quiere el producto",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1936),
                    TipoCancelacion = 1
                  },
                      new
                  {
                    MotivoCancelacionId = 8,
                    Activo = true,
                    Descripcion = "Por segundo intento de entrega",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1939),
                    TipoCancelacion = 2
                  },
                      new
                  {
                    MotivoCancelacionId = 9,
                    Activo = true,
                    Descripcion = "Por rechazo de producto",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1942),
                    TipoCancelacion = 2
                  },
                      new
                  {
                    MotivoCancelacionId = 10,
                    Activo = true,
                    Descripcion = "Por falta de dinero en la entrega",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1946),
                    TipoCancelacion = 2
                  },
                      new
                  {
                    MotivoCancelacionId = 11,
                    Activo = true,
                    Descripcion = "No se localizó al cliente",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1949),
                    TipoCancelacion = 2
                  });
          });

      modelBuilder.Entity("Tiui.Entities.Comun.Archivo", b =>
          {
            b.Property<long?>("ArchivoId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("ArchivoId"));

            b.Property<DateTime>("FechaRegistro")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("MimeType")
                      .HasColumnType("text");

            b.Property<string>("Nombre")
                      .HasColumnType("text");

            b.Property<string>("NombreReal")
                      .HasColumnType("text");

            b.Property<string>("Tag")
                      .HasColumnType("text");

            b.HasKey("ArchivoId");

            b.ToTable("Archivo");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.ConfiguracionApp", b =>
          {
            b.Property<int?>("ConfiguracionAppId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("ConfiguracionAppId"));

            b.Property<decimal>("ComisionCobroContraEntrega")
                      .HasColumnType("numeric");

            b.Property<string>("CorreoElectronicoAdministrativo")
                      .HasColumnType("text");

            b.Property<decimal>("IVA")
                      .HasColumnType("numeric");

            b.Property<decimal>("SeguroMercancia")
                      .HasColumnType("numeric");

            b.HasKey("ConfiguracionAppId");

            b.ToTable("ConfiguracionApp");

            b.HasData(
                      new
                  {
                    ConfiguracionAppId = 1,
                    ComisionCobroContraEntrega = 0.05m,
                    CorreoElectronicoAdministrativo = "",
                    IVA = 0.16m,
                    SeguroMercancia = 0.02m
                  });
          });

      modelBuilder.Entity("Tiui.Entities.Comun.ConfiguracionCajaTiuiAmigo", b =>
          {
            b.Property<int?>("ConfiguracionCajaTiuiAmigoId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("ConfiguracionCajaTiuiAmigoId"));

            b.Property<float>("Alto")
                      .HasColumnType("real");

            b.Property<float>("Ancho")
                      .HasColumnType("real");

            b.Property<float>("Largo")
                      .HasColumnType("real");

            b.Property<float>("Peso")
                      .HasColumnType("real");

            b.Property<int?>("TiuiAmigoId")
                      .HasColumnType("integer");

            b.HasKey("ConfiguracionCajaTiuiAmigoId");

            b.HasIndex("TiuiAmigoId");

            b.ToTable("CofiguracionesCajaTiuiAmigo");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.Direccion", b =>
          {
            b.Property<long?>("DireccionId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("DireccionId"));

            b.Property<bool>("Activo")
                      .HasColumnType("boolean");

            b.Property<string>("Calle")
                      .HasColumnType("text");

            b.Property<string>("CodigoPostal")
                      .HasColumnType("text");

            b.Property<string>("Colonia")
                      .HasColumnType("text");

            b.Property<string>("Cruzamiento")
                      .HasColumnType("text");

            b.Property<string>("Discriminator")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<int?>("MunicipioId")
                      .HasColumnType("integer");

            b.Property<string>("Numero")
                      .HasColumnType("text");

            b.Property<string>("Referencias")
                      .HasColumnType("text");

            b.HasKey("DireccionId");

            b.HasIndex("MunicipioId");

            b.ToTable("Direcciones");

            b.HasDiscriminator<string>("Discriminator").HasValue("Direccion");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.Estado", b =>
          {
            b.Property<int?>("EstadoId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("EstadoId"));

            b.Property<string>("Nombre")
                      .HasColumnType("text");

            b.Property<int?>("PaisId")
                      .HasColumnType("integer");

            b.HasKey("EstadoId");

            b.HasIndex("PaisId");

            b.ToTable("Estados");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.Estatus", b =>
          {
            b.Property<int?>("EstatusId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("EstatusId"));

            b.Property<bool>("Activo")
                      .HasColumnType("boolean");

            b.Property<string>("Descripcion")
                      .HasColumnType("text");

            b.Property<string>("Nombre")
                      .HasColumnType("text");

            b.Property<string>("Proceso")
                      .HasColumnType("text");

            b.Property<int>("TipoFlujo")
                      .HasColumnType("integer");

            b.HasKey("EstatusId");

            b.ToTable("Estatus");

            b.HasData(
                      new
                  {
                    EstatusId = 1,
                    Activo = true,
                    Descripcion = "Envío documentado (consolidado)",
                    Nombre = "Tu envío ha sido documentado consolidado",
                    Proceso = "Preparando",
                    TipoFlujo = 0
                  },
                      new
                  {
                    EstatusId = 2,
                    Activo = true,
                    Descripcion = "En camino a CDMX",
                    Nombre = "Tu envío está en camino a CDMX",
                    Proceso = "Preparando",
                    TipoFlujo = 0
                  },
                      new
                  {
                    EstatusId = 3,
                    Activo = true,
                    Descripcion = "Recepción de envío CEDIS Tiui CDMX",
                    Nombre = "Tu envío se recibió en CEDIS Tiui CDMX",
                    Proceso = "Preparando",
                    TipoFlujo = 0
                  },
                      new
                  {
                    EstatusId = 4,
                    Activo = true,
                    Descripcion = "En CEDIS Tiui CDMX (consolidado)",
                    Nombre = "Tu envío está en CEDIS Tiui CDMX consolidado",
                    Proceso = "Preparando",
                    TipoFlujo = 0
                  },
                      new
                  {
                    EstatusId = 5,
                    Activo = true,
                    Descripcion = "Envío documentado (fulfillment)",
                    Nombre = "Tu envío ha sido documentado fulfillment",
                    Proceso = "Preparando",
                    TipoFlujo = 1
                  },
                      new
                  {
                    EstatusId = 6,
                    Activo = true,
                    Descripcion = "Preparando paquete",
                    Nombre = "Estamos preparando tu paquete",
                    Proceso = "Preparando",
                    TipoFlujo = 1
                  },
                      new
                  {
                    EstatusId = 7,
                    Activo = true,
                    Descripcion = "En CEDIS Tiui CDMX (fulfillment)",
                    Nombre = "Tu envío está en CEDIS Tiui CDMX fulfillment",
                    Proceso = "Preparando",
                    TipoFlujo = 1
                  },
                      new
                  {
                    EstatusId = 8,
                    Activo = true,
                    Descripcion = "En espera de producto",
                    Nombre = "Oops! El inventario se ha agotado. Estamos en espera de que el proveedor reabastezca tu producto.",
                    Proceso = "Preparando",
                    TipoFlujo = 1
                  },
                      new
                  {
                    EstatusId = 9,
                    Activo = true,
                    Descripcion = "En ruta de entrega",
                    Nombre = "Tu envío está en ruta de entrega",
                    Proceso = "En camino",
                    TipoFlujo = 99
                  },
                      new
                  {
                    EstatusId = 10,
                    Activo = true,
                    Descripcion = "1er intento de entrega",
                    Nombre = "Se realizó el 1er intento de entrega",
                    Proceso = "En camino",
                    TipoFlujo = 99
                  },
                      new
                  {
                    EstatusId = 11,
                    Activo = true,
                    Descripcion = "Envío reagendado",
                    Nombre = "Tu envío se reagendó",
                    Proceso = "En camino",
                    TipoFlujo = 99
                  },
                      new
                  {
                    EstatusId = 12,
                    Activo = true,
                    Descripcion = "Cancelado",
                    Nombre = "Envío Cancelado",
                    Proceso = "En camino",
                    TipoFlujo = 99
                  },
                      new
                  {
                    EstatusId = 13,
                    Activo = true,
                    Descripcion = "Entregado",
                    Nombre = "Entregado",
                    Proceso = "Celebrando",
                    TipoFlujo = 99
                  },
                      new
                  {
                    EstatusId = 14,
                    Activo = true,
                    Descripcion = "Conciliado",
                    Nombre = "Conciliado",
                    Proceso = "Celebrando",
                    TipoFlujo = 99
                  },
                      new
                  {
                    EstatusId = 15,
                    Activo = true,
                    Descripcion = "Pagado",
                    Nombre = "Pagado",
                    Proceso = "Celebrando",
                    TipoFlujo = 99
                  },
                      new
                  {
                    EstatusId = 16,
                    Activo = true,
                    Descripcion = "Envío documentado (recolección)",
                    Nombre = "Envío documentado recolección",
                    Proceso = "Preparando",
                    TipoFlujo = 2
                  },
                      new
                  {
                    EstatusId = 17,
                    Activo = true,
                    Descripcion = "En camino a recolección",
                    Nombre = "En camino a recolección",
                    Proceso = "Preparando",
                    TipoFlujo = 2
                  },
                      new
                  {
                    EstatusId = 18,
                    Activo = true,
                    Descripcion = "Envío recolectado",
                    Nombre = "Envío recolectado",
                    Proceso = "Preparando",
                    TipoFlujo = 2
                  },
                      new
                  {
                    EstatusId = 19,
                    Activo = true,
                    Descripcion = "En CEDIS Tiui CDMX (recolección)",
                    Nombre = "Tu envío está en CEDIS Tiui CDMX recolección",
                    Proceso = "Preparando",
                    TipoFlujo = 2
                  });
          });

      modelBuilder.Entity("Tiui.Entities.Comun.Municipio", b =>
          {
            b.Property<int?>("MunicipioId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("MunicipioId"));

            b.Property<int?>("EstadoId")
                      .HasColumnType("integer");

            b.Property<string>("Nombre")
                      .HasColumnType("text");

            b.HasKey("MunicipioId");

            b.HasIndex("EstadoId");

            b.ToTable("Municipios");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.Pais", b =>
          {
            b.Property<int?>("PaisId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("PaisId"));

            b.Property<string>("Nombre")
                      .HasColumnType("text");

            b.HasKey("PaisId");

            b.ToTable("Paises");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.TiuiAmigo", b =>
          {
            b.Property<int?>("TiuiAmigoId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("TiuiAmigoId"));

            b.Property<bool>("Activo")
                      .HasColumnType("boolean");

            b.Property<string>("Apellidos")
                      .HasColumnType("text");

            b.Property<long?>("ArchivoId")
                      .HasColumnType("bigint");

            b.Property<string>("Celular")
                      .HasColumnType("text");

            b.Property<string>("Codigo")
                      .HasColumnType("text");

            b.Property<string>("CorreoElectronico")
                      .HasColumnType("text");

            b.Property<long?>("DireccionFiscalId")
                      .HasColumnType("bigint");

            b.Property<long?>("DireccionId")
                      .HasColumnType("bigint");

            b.Property<DateTime>("FechaRegistro")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("NombreContacto")
                      .HasColumnType("text");

            b.Property<string>("Nombres")
                      .HasColumnType("text");

            b.Property<string>("RFC")
                      .HasColumnType("text");

            b.Property<string>("RazonSocial")
                      .HasColumnType("text");

            b.Property<string>("TelefonoContacto")
                      .HasColumnType("text");

            b.Property<int>("TipoProceso")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer")
                      .HasDefaultValue(0);

            b.HasKey("TiuiAmigoId");

            b.HasIndex("ArchivoId");

            b.HasIndex("Codigo")
                      .IsUnique();

            b.HasIndex("DireccionFiscalId");

            b.HasIndex("DireccionId");

            b.ToTable("TiuiAmigos");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.BitacoraGuia", b =>
          {
            b.Property<long?>("BitacoraGuiaId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("BitacoraGuiaId"));

            b.Property<int>("EstatusAnterior")
                      .HasColumnType("integer");

            b.Property<int>("EstatusNuevo")
                      .HasColumnType("integer");

            b.Property<DateTime>("FechaRegistro")
                      .HasColumnType("timestamp without time zone");

            b.Property<long?>("GuiaId")
                      .HasColumnType("bigint");

            b.HasKey("BitacoraGuiaId");

            b.HasIndex("GuiaId");

            b.ToTable("BitacoraGuias");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.DireccionGuia", b =>
          {
            b.Property<long?>("DireccionGuiaId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("DireccionGuiaId"));

            b.Property<string>("Calle")
                      .HasColumnType("text");

            b.Property<string>("Ciudad")
                      .HasColumnType("text");

            b.Property<string>("CodigoPostal")
                      .HasColumnType("text");

            b.Property<string>("Colonia")
                      .HasColumnType("text");

            b.Property<string>("CorreoElectronico")
                      .HasColumnType("text");

            b.Property<string>("Cruzamiento")
                      .HasColumnType("text");

            b.Property<string>("Discriminator")
                      .IsRequired()
                      .HasColumnType("text");

            b.Property<string>("Empresa")
                      .HasColumnType("text");

            b.Property<string>("Estado")
                      .HasColumnType("text");

            b.Property<string>("Nombre")
                      .HasColumnType("text");

            b.Property<string>("Numero")
                      .HasColumnType("text");

            b.Property<string>("Pais")
                      .HasColumnType("text");

            b.Property<string>("Referencias")
                      .HasColumnType("text");

            b.Property<string>("Telefono")
                      .HasColumnType("text");

            b.HasKey("DireccionGuiaId");

            b.ToTable("DireccionesGuia");

            b.HasDiscriminator<string>("Discriminator").HasValue("DireccionGuia");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.EvidenciaEntrega", b =>
          {
            b.Property<long?>("EvidenciaEntregaId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("EvidenciaEntregaId"));

            b.Property<DateTime>("FechaRegistro")
                      .HasColumnType("timestamp without time zone");

            b.Property<long?>("FirmaArchivoId")
                      .HasColumnType("bigint");

            b.Property<long?>("FotoArchivoId")
                      .HasColumnType("bigint");

            b.Property<long?>("PaqueteId")
                      .HasColumnType("bigint");

            b.Property<string>("PersonaRecibe")
                      .HasColumnType("text");

            b.HasKey("EvidenciaEntregaId");

            b.HasIndex("FirmaArchivoId");

            b.HasIndex("FotoArchivoId");

            b.HasIndex("PaqueteId")
                      .IsUnique();

            b.ToTable("EvidenciaEntrega");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.Guia", b =>
          {
            b.Property<long?>("GuiaId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("GuiaId"));

            b.Property<int>("CantidadPaquetes")
                      .HasColumnType("integer");

            b.Property<decimal>("CobroContraEntrega")
                      .HasColumnType("numeric");

            b.Property<int>("Consecutivo")
                      .HasColumnType("integer");

            b.Property<decimal>("CostoOperativo")
                      .HasColumnType("numeric");

            b.Property<bool>("EsPagoContraEntrega")
                      .HasColumnType("boolean");

            b.Property<int?>("EstatusId")
                      .HasColumnType("integer");

            b.Property<DateTime?>("FechaConciliacion")
                      .HasColumnType("timestamp without time zone");

            b.Property<DateTime>("FechaEstimadaEntrega")
                      .HasColumnType("timestamp without time zone");

            b.Property<DateTime?>("FechaReagendado")
                      .HasColumnType("timestamp without time zone");

            b.Property<DateTime?>("FechaRegistro")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("Folio")
                      .HasColumnType("text");

            b.Property<decimal>("IVA")
                      .HasColumnType("numeric");

            b.Property<decimal>("ImporteCalculoSeguro")
                      .HasColumnType("numeric");

            b.Property<decimal>("ImporteContraEntrega")
                      .HasColumnType("numeric");

            b.Property<decimal>("ImportePaqueteria")
                      .HasColumnType("numeric");

            b.Property<decimal>("ImporteSeguroMercancia")
                      .HasColumnType("numeric");

            b.Property<string>("NombreProducto")
                      .HasColumnType("text");

            b.Property<long?>("PaqueteId")
                      .HasColumnType("bigint");

            b.Property<int?>("PaqueteriaId")
                      .HasColumnType("integer");

            b.Property<string>("ProcesoCancelacion")
                      .HasColumnType("text");

            b.Property<decimal>("SubTotal")
                      .HasColumnType("numeric");

            b.Property<bool>("TieneSeguroMercancia")
                      .HasColumnType("boolean");

            b.Property<int?>("TipoProcesoCancelacion")
                      .HasColumnType("integer");

            b.Property<int?>("TiuiAmigoId")
                      .HasColumnType("integer");

            b.Property<decimal>("Total")
                      .HasColumnType("numeric");

            b.HasKey("GuiaId");

            b.HasIndex("EstatusId");

            b.HasIndex("Folio")
                      .IsUnique();

            b.HasIndex("PaqueteId")
                      .IsUnique();

            b.HasIndex("PaqueteriaId");

            b.HasIndex("TiuiAmigoId");

            b.ToTable("Guias");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.NotificacionCliente", b =>
          {
            b.Property<int?>("NotificacionClienteId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("NotificacionClienteId"));

            b.Property<bool>("Activo")
                      .HasColumnType("boolean");

            b.Property<string>("CorreoElectronico")
                      .HasColumnType("text");

            b.Property<long?>("GuiaId")
                      .HasColumnType("bigint");

            b.Property<string>("Telefono")
                      .HasColumnType("text");

            b.HasKey("NotificacionClienteId");

            b.HasIndex("GuiaId");

            b.ToTable("NotificacionClientes");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.Paquete", b =>
          {
            b.Property<long?>("PaqueteId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("bigint");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long?>("PaqueteId"));

            b.Property<float>("Alto")
                      .HasColumnType("real");

            b.Property<float>("Ancho")
                      .HasColumnType("real");

            b.Property<int?>("EvidenciaEntregaId")
                      .HasColumnType("integer");

            b.Property<DateTime>("FechaRegistro")
                      .HasColumnType("timestamp without time zone");

            b.Property<float>("Largo")
                      .HasColumnType("real");

            b.Property<float>("PesoCotizado")
                      .HasColumnType("real");

            b.Property<float>("PesoFisico")
                      .HasColumnType("real");

            b.HasKey("PaqueteId");

            b.ToTable("Paquetes");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.Paqueteria", b =>
          {
            b.Property<int?>("PaqueteriaId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("PaqueteriaId"));

            b.Property<bool>("Activo")
                      .HasColumnType("boolean");

            b.Property<decimal>("CostoEnvio")
                      .HasColumnType("numeric");

            b.Property<string>("Descripcion")
                      .HasColumnType("text");

            b.Property<DateTime>("FechaRegistro")
                      .HasColumnType("timestamp without time zone");

            b.Property<int>("MaximoDiasDeEntrega")
                      .HasColumnType("integer");

            b.Property<string>("Nombre")
                      .HasColumnType("text");

            b.HasKey("PaqueteriaId");

            b.ToTable("Paqueterias");

            b.HasData(
                      new
                  {
                    PaqueteriaId = 1,
                    Activo = true,
                    CostoEnvio = 100m,
                    Descripcion = "Tiui",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1876),
                    MaximoDiasDeEntrega = 2,
                    Nombre = "Tipo 1 (24-48 horas)"
                  },
                      new
                  {
                    PaqueteriaId = 2,
                    Activo = true,
                    CostoEnvio = 100m,
                    Descripcion = "Tiui",
                    FechaRegistro = new DateTime(2022, 4, 29, 12, 41, 23, 626, DateTimeKind.Local).AddTicks(1884),
                    MaximoDiasDeEntrega = 4,
                    Nombre = "Tipo 2 (24-96 horas)"
                  });
          });

      modelBuilder.Entity("Tiui.Entities.Seguridad.Usuario", b =>
          {
            b.Property<int?>("UsuarioId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer");

            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("UsuarioId"));

            b.Property<bool>("Activo")
                      .HasColumnType("boolean");

            b.Property<int>("CodigoReestablecerPassword")
                      .HasColumnType("integer");

            b.Property<DateTime>("FechaModificacion")
                      .HasColumnType("timestamp without time zone");

            b.Property<DateTime>("FechaRegistro")
                      .HasColumnType("timestamp without time zone");

            b.Property<string>("NombreCompleto")
                      .HasColumnType("text");

            b.Property<string>("NombreUsuario")
                      .HasColumnType("text");

            b.Property<string>("Password")
                      .HasColumnType("text");

            b.Property<string>("Salt")
                      .HasColumnType("text");

            b.Property<int>("TipoUsuario")
                      .HasColumnType("integer");

            b.HasKey("UsuarioId");

            b.HasIndex("NombreUsuario")
                      .IsUnique();

            b.ToTable("Usuarios");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.LibretaDireccion", b =>
          {
            b.HasBaseType("Tiui.Entities.Comun.Direccion");

            b.Property<string>("CorreoElectronico")
                      .HasColumnType("text");

            b.Property<string>("Empresa")
                      .HasColumnType("text");

            b.Property<string>("Nombre")
                      .HasColumnType("text");

            b.Property<string>("Telefono")
                      .HasColumnType("text");

            b.Property<int?>("TiuiAmigoId")
                      .HasColumnType("integer");

            b.HasIndex("TiuiAmigoId");

            b.HasDiscriminator().HasValue("LibretaDireccion");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.Destinatario", b =>
          {
            b.HasBaseType("Tiui.Entities.Guias.DireccionGuia");

            b.Property<long?>("GuiaId")
                      .HasColumnType("bigint");

            b.HasIndex("GuiaId")
                      .IsUnique();

            b.HasDiscriminator().HasValue("Destinatario");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.Remitente", b =>
          {
            b.HasBaseType("Tiui.Entities.Guias.DireccionGuia");

            b.Property<long?>("GuiaId")
                      .HasColumnType("bigint")
                      .HasColumnName("Remitente_GuiaId");

            b.HasIndex("GuiaId")
                      .IsUnique();

            b.HasDiscriminator().HasValue("Remitente");
          });

      modelBuilder.Entity("Tiui.Entities.Cancelaciones.CancelacionGuia", b =>
          {
            b.HasOne("Tiui.Entities.Guias.Guia", "Guia")
                      .WithMany()
                      .HasForeignKey("GuiaId");

            b.HasOne("Tiui.Entities.Cancelaciones.MotivoCancelacion", "MotivoCancelacion")
                      .WithMany()
                      .HasForeignKey("MotivoCancelacionId");

            b.Navigation("Guia");

            b.Navigation("MotivoCancelacion");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.ConfiguracionCajaTiuiAmigo", b =>
          {
            b.HasOne("Tiui.Entities.Comun.TiuiAmigo", "TiuiAmigo")
                      .WithMany()
                      .HasForeignKey("TiuiAmigoId");

            b.Navigation("TiuiAmigo");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.Direccion", b =>
          {
            b.HasOne("Tiui.Entities.Comun.Municipio", "Municipio")
                      .WithMany()
                      .HasForeignKey("MunicipioId");

            b.Navigation("Municipio");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.Estado", b =>
          {
            b.HasOne("Tiui.Entities.Comun.Pais", "Pais")
                      .WithMany()
                      .HasForeignKey("PaisId");

            b.Navigation("Pais");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.Municipio", b =>
          {
            b.HasOne("Tiui.Entities.Comun.Estado", "Estado")
                      .WithMany()
                      .HasForeignKey("EstadoId");

            b.Navigation("Estado");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.TiuiAmigo", b =>
          {
            b.HasOne("Tiui.Entities.Comun.Archivo", "FotoINE")
                      .WithMany()
                      .HasForeignKey("ArchivoId");

            b.HasOne("Tiui.Entities.Comun.Direccion", "DireccionFiscal")
                      .WithMany()
                      .HasForeignKey("DireccionFiscalId");

            b.HasOne("Tiui.Entities.Comun.Direccion", "Direccion")
                      .WithMany()
                      .HasForeignKey("DireccionId");

            b.Navigation("Direccion");

            b.Navigation("DireccionFiscal");

            b.Navigation("FotoINE");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.BitacoraGuia", b =>
          {
            b.HasOne("Tiui.Entities.Guias.Guia", "Guia")
                      .WithMany()
                      .HasForeignKey("GuiaId");

            b.Navigation("Guia");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.EvidenciaEntrega", b =>
          {
            b.HasOne("Tiui.Entities.Comun.Archivo", "Firma")
                      .WithMany()
                      .HasForeignKey("FirmaArchivoId");

            b.HasOne("Tiui.Entities.Comun.Archivo", "Foto")
                      .WithMany()
                      .HasForeignKey("FotoArchivoId");

            b.HasOne("Tiui.Entities.Guias.Paquete", "Paquete")
                      .WithOne("EvidenciaEntrega")
                      .HasForeignKey("Tiui.Entities.Guias.EvidenciaEntrega", "PaqueteId");

            b.Navigation("Firma");

            b.Navigation("Foto");

            b.Navigation("Paquete");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.Guia", b =>
          {
            b.HasOne("Tiui.Entities.Comun.Estatus", "Estatus")
                      .WithMany()
                      .HasForeignKey("EstatusId");

            b.HasOne("Tiui.Entities.Guias.Paquete", "Paquete")
                      .WithOne("Guia")
                      .HasForeignKey("Tiui.Entities.Guias.Guia", "PaqueteId");

            b.HasOne("Tiui.Entities.Guias.Paqueteria", "Paqueteria")
                      .WithMany()
                      .HasForeignKey("PaqueteriaId");

            b.HasOne("Tiui.Entities.Comun.TiuiAmigo", "TiuiAmigo")
                      .WithMany()
                      .HasForeignKey("TiuiAmigoId");

            b.Navigation("Estatus");

            b.Navigation("Paquete");

            b.Navigation("Paqueteria");

            b.Navigation("TiuiAmigo");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.NotificacionCliente", b =>
          {
            b.HasOne("Tiui.Entities.Guias.Guia", "Guia")
                      .WithMany()
                      .HasForeignKey("GuiaId");

            b.Navigation("Guia");
          });

      modelBuilder.Entity("Tiui.Entities.Comun.LibretaDireccion", b =>
          {
            b.HasOne("Tiui.Entities.Comun.TiuiAmigo", "TiuiAmigo")
                      .WithMany()
                      .HasForeignKey("TiuiAmigoId");

            b.Navigation("TiuiAmigo");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.Destinatario", b =>
          {
            b.HasOne("Tiui.Entities.Guias.Guia", "Guia")
                      .WithOne("Destinatario")
                      .HasForeignKey("Tiui.Entities.Guias.Destinatario", "GuiaId");

            b.Navigation("Guia");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.Remitente", b =>
          {
            b.HasOne("Tiui.Entities.Guias.Guia", "Guia")
                      .WithOne("Remitente")
                      .HasForeignKey("Tiui.Entities.Guias.Remitente", "GuiaId");

            b.Navigation("Guia");
          });

      modelBuilder.Entity("Tiui.Entities.Guias.Guia", b =>
          {
            b.Navigation("Destinatario");

            b.Navigation("Remitente");
          });
      modelBuilder.Entity<Evidencia>().HasKey(e => e.id);

      modelBuilder.Entity("Tiui.Entities.Guias.Paquete", b =>
          {
            b.Navigation("EvidenciaEntrega");

            b.Navigation("Guia");
          });

#pragma warning restore 612, 618
    }
  }
}
